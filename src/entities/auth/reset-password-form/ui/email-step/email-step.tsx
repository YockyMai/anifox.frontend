import { Input, UIVariants } from '@anifox/ui'
import { yupResolver } from '@hookform/resolvers/yup'
import { useForm } from 'react-hook-form'

import { StepContainer } from '@/common/components'
import { emailSchema } from '@/entities/auth/signup/ui/email-step/email-step.schema'
import { useRequestPasswordResetMutation } from '@/graphql/generated/output'

import { $resetPasswordForm } from '../../store/reset-password-form.store'

export const EmailStep = () => {
  const email = $resetPasswordForm.selectors.email()

  const {
    register,
    handleSubmit,
    setError,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(emailSchema),
    defaultValues: {
      email
    }
  })

  const [requestPasswordResetMutation, { loading }] =
    useRequestPasswordResetMutation()

  const handleResetPasswordSubmit = handleSubmit(async (fields) => {
    try {
      await requestPasswordResetMutation({
        variables: {
          email: fields.email
        }
      })

      $resetPasswordForm.actions.setEmail(fields.email)
      $resetPasswordForm.actions.incrementStep()
    } catch {
      setError('root', {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞'
      })
    }
  })

  return (
    <StepContainer
      nextButton={{
        label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
        onClick: handleResetPasswordSubmit,
        isLoading: loading
      }}
      title='üíå –í–≤–µ–¥–∏—Ç–µ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
    >
      <Input
        {...register('email')}
        variant={UIVariants.FILLED}
        placeholder='ghoul@gmail.com'
        label='Email'
        error={errors.email?.message ?? errors.root?.message}
      />

      <p className='text-sm'>
        –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–¥–µ—Ç –Ω–∞ —ç—Ç—É –ø–æ—á—Ç—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É <b>—Å–ø–∞–º</b>,
        –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
      </p>
    </StepContainer>
  )
}
