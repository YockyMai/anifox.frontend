'use client'

import { yupResolver } from '@hookform/resolvers/yup'
import { useAtom } from 'jotai'
import { useEffect } from 'react'
import { useForm } from 'react-hook-form'

import { Input } from '@/common/components'

import { $signupAtoms } from '../../atoms'
import { useStepsActions } from '../../hooks'
import { StepContainer } from '../step-container'
import { nicknameSchema } from './nickname-step.schema'

export const NicknameStep = () => {
  const [nickname, setNickname] = useAtom($signupAtoms.nickname)

  const { incrementStep, decrementStep } = useStepsActions()

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(nicknameSchema),
    defaultValues: { nickname }
  })

  useEffect(() => {
    reset({ nickname })
  }, [nickname, reset])

  return (
    <StepContainer
      title='üî† –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º'
      prevButton={{ label: '–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', onClick: decrementStep }}
      nextButton={{
        label: '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
        onClick: handleSubmit((fields) => {
          setNickname(fields.nickname)
          incrementStep()
        })
      }}
    >
      <Input
        {...register('nickname')}
        error={errors.nickname?.message}
        label='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        variant='filled'
        placeholder='–¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º'
      />
      <p className='step-container__description'>
        –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–µ–∑–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –æ—Ç–∑—ã–≤–∞—Ö, –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        –∏ ... –î–∞ –≤–æ–æ–±—â–µ –≤–µ–∑–¥–µ :)
      </p>
    </StepContainer>
  )
}
